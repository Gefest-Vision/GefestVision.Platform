version: '3.4'

networks:
  backend:
    driver: bridge

services:
  postgres:
    container_name: postgres_blog
    image: "postgres"
    volumes:
      - ./db-data:/var/lib/postgresql/data/
      - ./sql:/docker-entrypoint-initdb.d/:ro
    env_file:
      - ./database.dev.env
    ports:
      - "5432:5432"
    networks:
      - backend
  keycloak:
    container_name: keycloak_blog
    image: "jboss/keycloak"
    env_file:
      - ./keycloak.dev.env
    depends_on:
      - "postgres"
    ports:
      - "8180:8080"
      - "8787:8787" # debug port
    networks:
      - backend

  nginx-database:
    image: mariadb:latest
    container_name: nginx-database
    environment:
      - MARIADB_ROOT_PASSWORD=rootpwd
      - MARIADB_USER=keycloak
      - MARIADB_PASSWORD=keycloakpwd
      - MARIADB_DATABASE=keycloak
    volumes:
      - nginx-database-data:/var/lib/mysql
    healthcheck:
      test: "mysql -uroot -prootpwd mysql -e 'select 1'"
      timeout: 5s
      retries: 10
      start_period: 5s
      interval: 1s

  nginx-keycloak-service:
    build:
      context: keycloak
    image: nginx-keycloak-service:latest
    container_name: nginx-keycloak-service
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: mariadb
      KC_DB_URL_HOST: nginx-database
      KC_DB_URL_PORT: 3306
      KC_DB_SCHEMA: keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloakpwd
      KC_HOSTNAME_URL: http://keycloak-nginx-proxy/auth
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_BACKCHANNEL: "false"
    ports:
      - "8080:8080"
    command:
      - start-dev --import-realm --optimized --proxy=edge
    depends_on:
      nginx-database:
        condition: service_healthy

  nginx-backend-service:
    build:
      context: backend
    image: nginx-backend-service:latest
    container_name: nginx-backend-service
    environment:
      KEYCLOAK_AUTH_SERVER_URL: http://nginx-keycloak-service:8080/auth

  nginx-frontend-service:
    build:
      context: frontend
    image: nginx-frontend-service:latest
    container_name: nginx-frontend-service

  nginx-service:
    build:
      context: nginx
    image: nginx-service
    container_name: nginx-service
    restart: on-failure
    ports:
      - "80:80"
    depends_on:
      nginx-database:
        condition: service_healthy
      nginx-keycloak-service:
        condition: service_started
        
  
  redis:
    image: "redis:alpine"
    ports:
      - "6380:6379"
    networks:
      - backend

  # Actor Runtime with Dapr sidecar
  tomkerkhove.dapr.actors.runtime:
    image: tomkerkhove/dapr.actors.runtime
    build:
      context: .
      dockerfile: TomKerkhove.Dapr.Actors.Runtime/Dockerfile
    ports:
      - "3500:3500"
      - "3000:3000"
    depends_on:
      - redis
      - placement
    networks:
      - backend
        
  # Device API with Dapr sidecar
  tomkerkhove.dapr.apis.management:
    image: tomkerkhove/dapr.apis.management
    build:
      context: .
      dockerfile: TomKerkhove.Dapr.APIs.Management/Dockerfile
    depends_on:
      - redis
      - placement
    networks:
      - backend
        
  tomkerkhove.dapr.actors.runtime.sidecar:
    image: "daprio/daprd:edge"
    command: [ "./daprd",
               "-app-id", "tomkerkhove.dapr.actors.runtime",
               "-app-port", "3000",
               "-placement-host-address", "placement:50006",
               "-components-path", "/components" ]
    volumes:
      - "./components/:/components"
    depends_on:
      - tomkerkhove.dapr.actors.runtime
    network_mode: "service:tomkerkhove.dapr.actors.runtime"
  
  tomkerkhove.dapr.apis.management.sidecar:
    image: "daprio/daprd:edge"
    command: [ "./daprd",
               "-app-id", "tomkerkhove.dapr.apis.management",
               "-placement-host-address", "placement:50006",
               "-components-path", "/components" ]
    volumes:
      - "./components/:/components"
    depends_on:
      - tomkerkhove.dapr.apis.management
    network_mode: "service:tomkerkhove.dapr.apis.management"
    
  # Dapr Infrastructure
  placement:
    image: "daprio/dapr"
    command: [ "./placement", "-port", "50006" ]
    ports:
      - "50006:50006"
    networks:
      - dapr